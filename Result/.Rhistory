install.packages("BCEA")
library(heemod)
surv_dist_1 <- define_survival(
distribution = "exp",
rate = .5
)
surv_dist_2 <- define_spline_survival(
scale = "odds",
gamma = c(-11.643, 1.843, 0.208),
knots = c(4.077537, 5.883183, 6.458338)
)
library(flexsurv)
install.packages("flexsurv")
plot(surv_dist_1)
install.packages(c("bslib", "cachem", "cpp11", "desc", "diffobj", "digest", "gert", "heemod", "hms", "htmltools", "httpuv", "igraph", "knitr", "later", "lattice", "lifecycle", "meta", "mgcv", "mime", "mvtnorm", "netmeta", "nlme", "openssl", "pbapply", "pillar", "pkgload", "pryr", "R6", "rcmdcheck", "RcppArmadillo", "RCurl", "remotes", "rlang", "rmarkdown", "robustbase", "roxygen2", "rvest", "shiny", "stringi", "survival", "systemfonts", "testthat", "tibble", "tinytex", "usethis", "waldo", "xfun"))
library(heemod)
library(flexsurv)
install.packages("deSolve")
surv_dist_1 <- define_survival(
distribution = "exp",
rate = .5
)
surv_dist_2 <- define_spline_survival(
scale = "odds",
gamma = c(-11.643, 1.843, 0.208),
knots = c(4.077537, 5.883183, 6.458338)
)
library(flexsurv)
surv_dist_1 <- define_survival(
distribution = "exp",
rate = .5
)
surv_dist_2 <- define_spline_survival(
scale = "odds",
gamma = c(-11.643, 1.843, 0.208),
knots = c(4.077537, 5.883183, 6.458338)
)
install.packages("deSolve")
install.packages("gfortran")
install.packages("gfortran")
install.packages("deSolve")
library(heemod)
library(flexsurv)
surv_dist_1 <- define_survival(
distribution = "exp",
rate = .5
)
surv_dist_2 <- define_spline_survival(
scale = "odds",
gamma = c(-11.643, 1.843, 0.208),
knots = c(4.077537, 5.883183, 6.458338)
)
fit_w <- flexsurvreg(
formula = Surv(futime, fustat) ~ 1,
data = ovarian, dist = "weibull"
)
plot(fit_w)
fit_w <- flexsurvreg(
formula = Surv(futime, fustat) ~ 1,
data = ovarian, dist = "weibull"
)
plot(fit_w)
fit_w <- flexsurvreg(
formula = Surv(futime, fustat) ~ 1,
data = ovarian, dist = "weibull"
)
plot(fit_w)
library(flexsurv)
fit_w <- flexsurvreg(
formula = Surv(futime, fustat) ~ 1,
data = ovarian, dist = "weibull"
)
plot(fit_w)
fit_spl <- flexsurvspline(
formula = Surv(futime, fustat) ~ 1,
data = ovarian,
scale = "odds",
k=1
)
plot(fit_spl)
fit_cov <- flexsurvreg(
formula = Surv(rectime, censrec) ~ group,
dist = "weibull",
data = bc
)
plot(fit_cov)
fitcov_good   <- set_covariates(fit_cov, group = "Good")
fitcov_medium <- set_covariates(fit_cov, group = "Medium")
fitcov_poor   <- set_covariates(fit_cov, group = "Poor")
fitcov_good
plot(fitcov_good)
library(survival)
km_1 <- survfit(
formula = Surv(futime, fustat) ~ 1,
data = ovarian
)
km_cov <- survfit(
formula = Surv(rectime, censrec) ~ group,
data = bc
)
plot(km_cov)
km_good   <- set_covariates(km_cov, group = "Good")
km_medium <- set_covariates(km_cov, group = "Medium")
km_poor   <- set_covariates(km_cov, group = "Poor")
km_poor_join <- join(
km_poor,
fitcov_poor,
at = 365
)
models_all <- mix(
fitcov_good, fitcov_medium, fitcov_poor,
weights = c(0.25, 0.25, 0.5)
)
combined_risks <- add_hazards(
fit_w, fitcov_good
)
compute_surv(surv_dist_2, time = 1:5)
fit_cov %>%
set_covariates(group = "Good") %>%
apply_hr(hr = 2) %>%
join(
fitcov_poor,
at = 3
) %>%
mix(
fitcov_medium,
weights = c(0.25, 0.75)
) %>%
add_hazards(
fit_w
) %>%
compute_surv(time = 1:5)
param <- define_parameters(
p1 = compute_surv(
surv_dist_1,
time = model_time # can also be state_time
),
p2 = km_1 %>%
join(fit_w, at = 730) %>%
compute_surv(
time = model_time,
cycle_length = 365  # time is in days in km_medium, in years in model_time
)
)
tm <- define_transition(
C, p1 - p2, p2,
0, C,       p2,
0, 0,       C
)
plot(tm)
sA <-  define_state(
cost = 10, ut = 1
)
sB <-  define_state(
cost = 20, ut = .5
)
sC <-  define_state(
cost = 0, ut = 0
)
stratTM <- define_strategy(
transition = tm,
A = sA, B = sB, C = sC
)
resTM <- run_model(
parameters = param,
stratTM,
cycles = 15,
cost = cost, effect = ut
)
ps <- define_part_surv(
pfs = surv_dist_1,
os  = km_1 %>%
join(fit_w, at = 730),
cycle_length = c(1, 365) # 1 for pfs, 365 for os
)
stratPS <- define_strategy(
transition = ps,
A = sA, B = sB, C = sC
)
resPS <- run_model(
stratPS,
cycles = 15,
cost = cost, effect = ut
)
plot(resPS)
resPS
summary(resPS)
citation()
citation("triangle")
out <- readRDS("~/Downloads/out.rds")
out$models
out
library(readr)
Data <- read_delim("Downloads/panel_330.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(Data)
Data <- read_delim(
"Downloads/panel_330.csv",
delim = ";")
Data
View(Data)
# example included in FRONTIER 4.1 (cross-section data)
data( front41Data )
rm(list = ls()); gc()
# example included in FRONTIER 4.1 (cross-section data)
data( front41Data )
# Cobb-Douglas production frontier
cobbDouglas <- sfa( log( output ) ~ log( capital ) + log( labour ),
data = front41Data )
library(frontier)
library(frontier)
# example included in FRONTIER 4.1 (cross-section data)
data( front41Data )
# Cobb-Douglas production frontier
cobbDouglas <- sfa( log( output ) ~ log( capital ) + log( labour ),
data = front41Data )
View(cobbDouglas)
summary( cobbDouglas )
# Error Components Frontier (Battese & Coelli 1992)
# with "true" fixed individual effects and observation-specific efficiencies
riceTrue <- sfa( log( PROD ) ~ log( AREA ) + log( LABOR ) + log( NPK ) +
factor( FMERCODE ),  data = riceProdPhil )
summary( rice )
# load data about rice producers in the Philippines (panel data)
data( riceProdPhil )
# Error Components Frontier (Battese & Coelli 1992)
# with observation-specific efficiencies (ignoring the panel structure)
rice <- sfa( log( PROD ) ~ log( AREA ) + log( LABOR ) + log( NPK ),
data = riceProdPhil )
summary( rice )
# Error Components Frontier (Battese & Coelli 1992)
# with "true" fixed individual effects and observation-specific efficiencies
riceTrue <- sfa( log( PROD ) ~ log( AREA ) + log( LABOR ) + log( NPK ) +
factor( FMERCODE ),  data = riceProdPhil )
summary( riceTrue )
# add data set with information about its panel structure
library( "plm" )
View(riceProdPhil)
ricePanel <- pdata.frame( riceProdPhil, c( "FMERCODE", "YEARDUM" ) )
# Error Components Frontier (Battese & Coelli 1992)
# with time-invariant efficiencies
riceTimeInv <- sfa( log( PROD ) ~ log( AREA ) + log( LABOR ) + log( NPK ),
data = ricePanel )
summary( riceTimeInv )
View(ricePanel)
names(Data)
library(frontier)
library(readr)
library(plm)
Data <- read_delim("Downloads/panel_330.csv",
delim = ";")
head(Data)
# add data set with information about its panel structure
healthPanel <- pdata.frame(Data, c("id", "year"))
healthPanel
names(Data)
# Error Components Frontier (Battese & Coelli 1992)
# with time-invariant efficiencies
healtTime <-
sfa(log(evn) ~ log(enf) + log(med) + log(gspc),
data = healthPanel)
summary(healtTime)
# Error Components Frontier (Battese & Coelli 1992)
# with time-variant efficiencies
healtTimeVarint <-
sfa(log(evn) ~ log(enf) + log(med) + log(gspc),
data = healthPanel,
timeEffect = TRUE
)
# Error Components Frontier (Battese & Coelli 1992)
# with time-variant efficiencies
healtTimeVarint <-
sfa(log(evn) ~ log(enf) + log(med) + log(gspc),
data = healthPanel,
timeEffect = TRUE
)
summary(riceTimeVar)
summary(healtTimeVarint)
names(Data)
# Technical Efficiency Effects Frontier (Battese & Coelli 1995)
# (efficiency effects model with intercept)
healtZ <-
sfa(
log(evn) ~ log(enf) + log(med) + log(gspc)
| denpob + dandina + dcaribe + dpacifico +
dorinoquia + damazonia + tasaurba + indenvej +
acued + alcanta + pibpc + edu +
homi + hurtos + idf,
data = riceProdPhil)
# Technical Efficiency Effects Frontier (Battese & Coelli 1995)
# (efficiency effects model with intercept)
healtZ <-
sfa(
log(evn) ~ log(enf) + log(med) + log(gspc)
| denpob + dandina + dcaribe + dpacifico +
dorinoquia + damazonia + tasaurba + indenvej +
acued + alcanta + pibpc + edu +
homi + hurtos + idf,
data = healthPanel)
summary(riceZ)
summary(healtZ)
# Technical Efficiency Effects Frontier (Battese & Coelli 1995)
# (efficiency effects model without intercept)
healtZNoIntercept <-
sfa(log(evn) ~ log(enf) + log(med) + log(gspc)
| denpob + dandina + dcaribe + dpacifico +
dorinoquia + damazonia + tasaurba + indenvej +
acued + alcanta + pibpc + edu +
homi + hurtos + idf - 1,
data = healthPanel)
summary(healtZNoIntercept)
cycle = 1
time_respuesta = 34
to_time = 34
from_time = 6
rescale_prob(ifelse(time_respuesta * 6 < 34,pspline:::predict.smooth.Pspline(MMR_DasaIma$DASATINIB, time_respuesta * 6),pspline:::predict.smooth.Pspline(MMR_DasaIma$DASATINIB, 34)), to = to_time, from = from_time)
rescale_prob(ifelse(time_respuesta * 6 < 35,pspline:::predict.smooth.Pspline(MMR_DasaIma$IMATINIB, time_respuesta * 6),pspline:::predict.smooth.Pspline(MMR_DasaIma$IMATINIB, 35)), to = to_time, from = from_time)
library(heemod)
rescale_prob(ifelse(time_respuesta * 6 < 34,pspline:::predict.smooth.Pspline(MMR_DasaIma$DASATINIB, time_respuesta * 6),pspline:::predict.smooth.Pspline(MMR_DasaIma$DASATINIB, 34)), to = to_time, from = from_time)
rescale_prob(ifelse(time_respuesta * 6 < 35,pspline:::predict.smooth.Pspline(MMR_DasaIma$IMATINIB, time_respuesta * 6),pspline:::predict.smooth.Pspline(MMR_DasaIma$IMATINIB, 35)), to = to_time, from = from_time)
rm(list = ls()); gc()
library(readr)
library(dplyr)
setwd("~/Documents/Tesis/Code/GameMinority/Result")
files_puntuation = list.files(pattern = "_puntuation")
files_summary = list.files(pattern = "\\d\\.csv")
data_summmary <- NULL
for (file in files_summary){
tmp <- read_csv(file)
data_summmary <- rbind(data_summmary, tmp)
}
tmp <- NULL
gc()
result <- data_summmary %>%
select(LenMemory, Simulation, n_wins) %>%
group_by(LenMemory, Simulation) %>%
summarize(
m = mean(n_wins, na.rm=TRUE),
sd = sd(n_wins)
)
plot(result$LenMemory, result$sd)
rm(list = ls()); gc()
library(readr)
library(dplyr)
setwd("~/Documents/Tesis/Code/GameMinority/Result")
files_puntuation = list.files(pattern = "_puntuation")
files_summary = list.files(pattern = "\\d\\.csv")
data_summmary <- NULL
for (file in files_summary){
tmp <- read_csv(file)
data_summmary <- rbind(data_summmary, tmp)
}
tmp <- NULL
gc()
result <- data_summmary %>%
select(LenMemory, Simulation, n_wins) %>%
group_by(LenMemory, Simulation) %>%
summarize(
m = mean(n_wins, na.rm=TRUE),
sd = sd(n_wins)
)
plot(result$LenMemory, result$sd)
# data_pupulation <- NULL
# for (file in files_puntuation){
#   tmp <- read_csv(file)
#   tmp$file <- file
#   data_pupulation <- rbind(data_pupulation, tmp)
# }
# tmp <- NULL
# gc()
#
# result_pupulation <- data_pupulation %>%
#   group_by(file) %>%
#   summarize(
#     m = mean(`0`, na.rm=TRUE),
#     sd = sd(`0`)
#   )
#
# result_pupulation
